as.list.igraph <- function(thisNode) {
nm <- vertex_attr(net, "name", thisNode)
childNodes <- V(net)[which(shortest.paths(net, thisNode, mode="out") == 1)]
if (length(childNodes)==0) return(list(name=nm))
list(name=nm, children=unname(lapply(childNodes, as.list.igraph)))
}
#color
Clu<-read.table("438celltype-NEW-20190728.annotation",sep="\t",head=T)
rownames(Clu)<-Clu$Celltype
Clu$Cluster<-gsub("[.].","",Clu$Cluster)
Clu$Cluster<-gsub("[..].","",Clu$Cluster)
color.list<-read.table("39Cluster_color.major.list",sep="\t",head=T)
rownames(color.list)<-color.list$name
Cluster_col<-color.list[Clu$Cluster,]
color.df<-data.frame(
name=Clu$Celltype,
color=Cluster_col$color
)
w <- paste('{', paste(color.df %>%
mutate(name = paste0('"', name), color = paste0(color, '"')) %>%
unite('x', c(name, color), sep = '" : "' ) %>%
.$x, collapse= ', '), '}', collapse = '')
node.col.func <- JS(paste0('function(d, i) { return ', w, '[d.data.name]; }'))
root
#radialNetwork
radialNetwork(as.list.igraph(V(net)[root[1]]),
fontSize =0,
opacity = 1,
height = 1000,
width=1000,
linkColour = "darkgray",
textColour = "#cccccc",
#textColour =node.col.func,
#nodeStroke = node.col.func,
nodeColour  = node.col.func
)
data = read.table('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
header=TRUE, sep='\t')
dim(data)
Relationships<- data.frame(Parent=data$Celltype2,
Child=data$Celltype1)
dim(Relationships)
Relationships<- data.frame('Parent'=data$Celltype2,
'Child'=data$Celltype1)
dim(Relationships)
Relationships<- data.frame(Parent=c(2,4,6,7),
Child=c(1,2,3,4))
dim(Relationships)
Relationships
data$Celltype2
data = read.table('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
header=TRUE, sep='\t')
dim(data)
dim(data)
colnames(data)
data = read.table('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
header=TRUE, sep='\t')
dim(data)
colnames(data)
Relationships<- data.frame(Parent=data$CellType2,
Child=data$CellType1)
dim(Relationships)
net <- graph_from_data_frame(d=Relationships, directed=T)
root<-setdiff(Relationships$Parent, Relationships$Child)
root
#traverse next layer and then recurve
as.list.igraph <- function(thisNode) {
nm <- vertex_attr(net, "name", thisNode)
childNodes <- V(net)[which(shortest.paths(net, thisNode, mode="out") == 1)]
if (length(childNodes)==0) return(list(name=nm))
list(name=nm, children=unname(lapply(childNodes, as.list.igraph)))
}
#color
Clu<-read.table("438celltype-NEW-20190728.annotation",sep="\t",head=T)
rownames(Clu)<-Clu$Celltype
Clu$Cluster<-gsub("[.].","",Clu$Cluster)
Clu$Cluster<-gsub("[..].","",Clu$Cluster)
color.list<-read.table("39Cluster_color.major.list",sep="\t",head=T)
rownames(color.list)<-color.list$name
Cluster_col<-color.list[Clu$Cluster,]
color.df<-data.frame(
name=Clu$Celltype,
color=Cluster_col$color
)
w <- paste('{', paste(color.df %>%
mutate(name = paste0('"', name), color = paste0(color, '"')) %>%
unite('x', c(name, color), sep = '" : "' ) %>%
.$x, collapse= ', '), '}', collapse = '')
node.col.func <- JS(paste0('function(d, i) { return ', w, '[d.data.name]; }'))
root
#radialNetwork
radialNetwork(as.list.igraph(V(net)[root[1]]),
fontSize =0,
opacity = 1,
height = 1000,
width=1000,
linkColour = "darkgray",
textColour = "#cccccc",
#textColour =node.col.func,
#nodeStroke = node.col.func,
nodeColour  = node.col.func
)
source("./Main_diagonal.r")
test_draw_diagonal()
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
source("./Main_diagonal.r")
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
c(simi_cor_data, anno_info_fname, color) <- c('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
+               "438celltype-NEW-20190728.annotation",
+               "39Cluster_color.major.list")
c(simi_cor_data, anno_info_fname, color) <- c('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt', "438celltype-NEW-20190728.annotation", "39Cluster_color.major.list")
c(simi_cor_data, anno_info_fname, color) <- c("/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt", "438celltype-NEW-20190728.annotation", "39Cluster_color.major.list")
simi_cor_data <-'/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt'
anno_info_fname <- "438celltype-NEW-20190728.annotation"
color <- "39Cluster_color.major.list"
data = read.table(simi_cor_data,
header=TRUE, sep='\t')
# check
dim(data)
colnames(data)
Relationships<- data.frame(Parent=data$CellType2,
Child=data$CellType1)
root<-setdiff(Relationships$Parent, Relationships$Child)
# check
root
dim(Relationships)
net <- graph_from_data_frame(d=Relationships, directed=T)
# anno
Clu<-read.table(anno_info_fname,sep="\t",head=T)
rownames(Clu)<-Clu$Celltype
Clu$Cluster<-gsub("[.].","",Clu$Cluster)
Clu$Cluster<-gsub("[..].","",Clu$Cluster)
#color
color.list<-read.table(color,sep="\t",head=T)
rownames(color.list)<-color.list$name
Cluster_col<-color.list[Clu$Cluster,]
color.df<-data.frame(
name=Clu$Celltype,
color=Cluster_col$color
)
w <- paste('{', paste(color.df %>%
mutate(name = paste0('"', name), color = paste0(color, '"')) %>%
unite('x', c(name, color), sep = '" : "' ) %>%
.$x, collapse= ', '), '}', collapse = '')
node.col.func <- JS(paste0('function(d, i) { return ', w, '[d.data.name]; }'))
#radialNetwork
radialNetwork(as.list.igraph(V(net)[root[1]]),
fontSize =0,
opacity = 1,
height = 1000,
width=1000,
linkColour = "darkgray",
textColour = "#cccccc",
#textColour =node.col.func,
#nodeStroke = node.col.func,
nodeColour  = node.col.func)
#traverse next layer and then recurve
as.list.igraph <- function(thisNode) {
nm <- vertex_attr(net, "name", thisNode)
childNodes <- V(net)[which(shortest.paths(net, thisNode, mode="out") == 1)]
if (length(childNodes)==0) return(list(name=nm))
list(name=nm, children=unname(lapply(childNodes, as.list.igraph)))
}
test_draw_diagonal <- function(){
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
}
test_draw_diagonal <- function(){
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
}
return(ax)
source("./Main_diagonal.r")
test_draw_diagonal <- function(){
ax <- draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
return(ax)
}
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
draw_diagonal <- function(simi_cor_data, anno_info_fname, color){
data = read.table(simi_cor_data,
header=TRUE, sep='\t')
# check
dim(data)
colnames(data)
Relationships<- data.frame(Parent=data$CellType2,
Child=data$CellType1)
root<-setdiff(Relationships$Parent, Relationships$Child)
# check
root
dim(Relationships)
net <- graph_from_data_frame(d=Relationships, directed=T)
# anno
Clu<-read.table(anno_info_fname,sep="\t",head=T)
rownames(Clu)<-Clu$Celltype
Clu$Cluster<-gsub("[.].","",Clu$Cluster)
Clu$Cluster<-gsub("[..].","",Clu$Cluster)
#color
color.list<-read.table(color,sep="\t",head=T)
rownames(color.list)<-color.list$name
Cluster_col<-color.list[Clu$Cluster,]
color.df<-data.frame(
name=Clu$Celltype,
color=Cluster_col$color
)
w <- paste('{', paste(color.df %>%
mutate(name = paste0('"', name), color = paste0(color, '"')) %>%
unite('x', c(name, color), sep = '" : "' ) %>%
.$x, collapse= ', '), '}', collapse = '')
node.col.func <- JS(paste0('function(d, i) { return ', w, '[d.data.name]; }'))
#radialNetwork
radialNetwork(as.list.igraph(V(net)[root[1]]),
fontSize =0,
opacity = 1,
height = 1000,
width=1000,
linkColour = "darkgray",
textColour = "#cccccc",
#textColour =node.col.func,
#nodeStroke = node.col.func,
nodeColour  = node.col.func)
}
test_draw_diagonal <- function(){
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
}
test_draw_diagonal()
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
q()
#traverse next layer and then recurve
as.list.igraph <- function(thisNode) {
nm <- vertex_attr(net, "name", thisNode)
childNodes <- V(net)[which(shortest.paths(net, thisNode, mode="out") == 1)]
if (length(childNodes)==0) return(list(name=nm))
list(name=nm, children=unname(lapply(childNodes, as.list.igraph)))
}
draw_diagonal <- function(simi_cor_data, anno_info_fname, color){
data = read.table(simi_cor_data,
header=TRUE, sep='\t')
# check
dim(data)
colnames(data)
Relationships<- data.frame(Parent=data$CellType2,
Child=data$CellType1)
root<-setdiff(Relationships$Parent, Relationships$Child)
# check
root
dim(Relationships)
net <- graph_from_data_frame(d=Relationships, directed=T)
# anno
Clu<-read.table(anno_info_fname,sep="\t",head=T)
rownames(Clu)<-Clu$Celltype
Clu$Cluster<-gsub("[.].","",Clu$Cluster)
Clu$Cluster<-gsub("[..].","",Clu$Cluster)
#traverse next layer and then recurve
as.list.igraph <- function(thisNode) {
nm <- vertex_attr(net, "name", thisNode)
childNodes <- V(net)[which(shortest.paths(net, thisNode, mode="out") == 1)]
if (length(childNodes)==0) return(list(name=nm))
list(name=nm, children=unname(lapply(childNodes, as.list.igraph)))
}
#color
color.list<-read.table(color,sep="\t",head=T)
rownames(color.list)<-color.list$name
Cluster_col<-color.list[Clu$Cluster,]
color.df<-data.frame(
name=Clu$Celltype,
color=Cluster_col$color
)
w <- paste('{', paste(color.df %>%
mutate(name = paste0('"', name), color = paste0(color, '"')) %>%
unite('x', c(name, color), sep = '" : "' ) %>%
.$x, collapse= ', '), '}', collapse = '')
node.col.func <- JS(paste0('function(d, i) { return ', w, '[d.data.name]; }'))
#radialNetwork
radialNetwork(as.list.igraph(V(net)[root[1]]),
fontSize =0,
opacity = 1,
height = 1000,
width=1000,
linkColour = "darkgray",
textColour = "#cccccc",
#textColour =node.col.func,
#nodeStroke = node.col.func,
nodeColour  = node.col.func)
}
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
test_draw_diagonal <- function(){
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
}
##### TEST Function ####
draw_diagonal('/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Tree_new_work/Total_dup_species.Cor.ann.sort.max_8_subclass.txt',
"438celltype-NEW-20190728.annotation",
"39Cluster_color.major.list")
delete_list=NULL
if(delete_list){}
if(delete_list){print('1')}
if(delete_list){print('1')}
is.null(delete_list)
& is.null(delete_list)
!is.null(delete_list)
root_added = data.frame()
root_added = data.frame("Cnidocytean.n	Nematostella	Cnidocytean.n	root	Root	root	1")
root_added
root_added = data.frame(c("Cnidocytean.n","Nematostella","Cnidocytean.n","root", "Root", "root", "1")
)
root_added
root_added = data.frame(list(c("Cnidocytean.n","Nematostella","Cnidocytean.n","root", "Root", "root", "1")))
root_added
setwd("/home/ggj/jiaqiLi/dev/R_dev/script")
root <- read.table("root.txt", sep='\t')
root
colnames(root) <- c("CellType1", "Species1", "Sub_Cluster1",
"CellType2", "Species2", "Sub_Cluster2", "Value")
root
source("./0_merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
delete_list = c("TNFalpha cells(H).z", "sst1.1 cells(P).z", "Apelin cells(H).z", "Apelin cells(P).z",
"Testicular cell.m", "Prostate gland cell.m", "Luteal cell.m",
"Mammary gland in lactation.m", "Corneal cells.lz", "Ciona31", "Trophoblast progenitor cell.m",
"Unknown(H).z", "Unknown(B).z")
for(item in delete_list){}
for(item in delete_list){print(item)}
for(item in delete_list){print(typeof(item)}
for(item in delete_list){print(typeof(item))}
delete_celltype <- function(rearranged_celltype_mat, delete_list){
for(item in delete_list){
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != item]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != item]
}
return(rearranged_celltype_mat)
}
fname_vector <- c("/home/ggj/jiaqiLi/dev/R_dev/JiaQi/H_M/ensemble/AddFat2/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/M_Z/AddAdipose/M_adult/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/M_Z/AddAdipose/M_larvea/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/M_Z/AddAdipose/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Z_SS/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Z_SS/Adult/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Z_SS/Fetal/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/SS_C/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/C_S/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/S_N/celltype.NV_SRS_75.out")
arranged_species_name_vector <- c(
"Nematostella",
"Schmidtea",
"Celegans",
"SeaSquirts",
"Zebrafish",
"Mouse",
"Human"
)
anno_info_fname = "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/438celltype-NEW-20190728.annotation"
delete_list = c("TNFalpha cells(H).z", "sst1.1 cells(P).z", "Apelin cells(H).z", "Apelin cells(P).z",
"Testicular cell.m", "Prostate gland cell.m", "Luteal cell.m",
"Mammary gland in lactation.m", "Corneal cells.lz", "Ciona31", "Trophoblast progenitor cell.m",
"Unknown(H).z", "Unknown(B).z")
total_celltype_mat <- read_celltype_mat(fname_vector[1])
for (file_name_str in fname_vector[-1]){
print(file_name_str)
tmp_celltype_mat <- read_celltype_mat(file_name_str)
total_celltype_mat <- merge_matrix(total_celltype_mat, tmp_celltype_mat)
}
if (CHECK_POINT) {
#check point
write.table(total_celltype_mat, file="Total_dup_species.Cor.txt",
sep="\t", quote=F, row.names=F)
}
annotated_total_celltype_mat <- anno_Cor_file(total_celltype_mat, anno_info_fname)
if (CHECK_POINT) {
#check point
write.table(annotated_total_celltype_mat, file="Total_dup_species.Cor.ann_subcluster.txt",
sep="\t", quote=F, row.names=F)
}
rearranged_anno_total_celltype_mat <- celltype_rearrange(annotated_total_celltype_mat, arranged_species_name_vector[1],
arrange_first=TRUE)
if (CHECK_POINT){
#check point
write.table(rearranged_anno_total_celltype_mat, file="Total_dup_species.Cor.ann_subcluster1.sort.txt",
sep="\t", row.names=FALSE, quote=F)
}
for (species_name in arranged_species_name_vector[-1]){
print(species_name)
rearranged_anno_total_celltype_mat <- celltype_rearrange(rearranged_anno_total_celltype_mat, species_name,
arrange_first=FALSE)
}
if (CHECK_POINT){
#check point
write.table(rearranged_anno_total_celltype_mat, file="Total_dup_species.Cor.ann_subcluster.sort.txt",
sep="\t", row.names=FALSE, quote=F)
}
if (!is.null(delete_list)){
rearranged_anno_total_celltype_mat <- delete_celltype(rearranged_anno_total_celltype_mat, delete_list)
}
rearranged_anno_total_celltype_mat <- delete_celltype(rearranged_anno_total_celltype_mat, delete_list)
for(item in delete_list){
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != item]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != item]
}
rearranged_celltype_mat <- rearranged_anno_total_celltype_mat
# delete some celltype
# delete_celltype <- function(rearranged_celltype_mat, delete_list){
for(item in delete_list){
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != item]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != item]
}
item = delete_list[[1]]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != item]
item
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != as.character(item)]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != as.character(item)]
colnames(rearranged_celltype_mat)
as.character(item)
for(item in delete_list){
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != as.character(item)]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != as.character(item)]
}
for( i in range(1, length(delete_list))){
item = delete_list[[i]]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != as.character(item)]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != as.character(item)]
}
rearranged_celltype_mat$CellType1
rearranged_celltype_mat
typeof(rearranged_celltype_mat)
colnames(rearranged_celltype_mat)
class(rearranged_celltype_mat)
rearranged_celltype_mat <- as.data.frame(rearranged_celltype_mat)
for(item in delete_list){
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != as.character(item)]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != as.character(item)]
}
colnames(rearranged_celltype_mat)
for(item in delete_list){
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType1 != as.character(item),]
rearranged_celltype_mat <- rearranged_celltype_mat[rearranged_celltype_mat$CellType2 != as.character(item),]
}
source("0_merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
source("0_merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
source("Main_diagonal.r")
source("Main_diagonal.r")
source("Main_diagonal.r")
source("Main_diagonal.r")
draw_diagonal("./Total_dup_species.Cor.ann.sort.max_8_subclass.txt", "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/438celltype-NEW-20190728.annotation")
draw_diagonal("./Total_dup_species.Cor.ann.sort.max_8_subclass.txt", "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/438celltype-NEW-20190728.annotation", "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/39Cluster_color.major.list")
source("0_merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
source("0_merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
source("0_merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
draw_diagonal("./Total_dup_species.Cor.ann.sort.max_8_subclass.txt", "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/438celltype-NEW-20190728.annotation")
draw_diagonal("./Total_dup_species.Cor.ann.sort.max_8_subclass.txt", "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/438celltype-NEW-20190728.annotation", "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/39Cluster_color.major.list")
setwd("/home/ggj/jiaqiLi/dev/R_dev/script/evolution_tree/")
source("merge_celltype_pipeline.r")
source("Main_diagonal.r")
test_merge_celltype_pipeline()
test_merge_celltype_pipeline()
############################ TEST FUNCTION #############################
test_merge_celltype_pipeline <- function(){
fname_vector <- c("/home/ggj/jiaqiLi/dev/R_dev/JiaQi/H_M/ensemble/AddFat2/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/M_Z/AddAdipose/M_adult/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/M_Z/AddAdipose/M_larvea/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/M_Z/AddAdipose/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Z_SS/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Z_SS/Adult/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/Z_SS/Fetal/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/SS_C/celltype.NV_SRS_75-total.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/C_S/celltype.NV_SRS_75.out",
"/home/ggj/jiaqiLi/dev/R_dev/JiaQi/S_N/celltype.NV_SRS_75.out")
arranged_species_name_vector <- c(
"Nematostella",
"Schmidtea",
"Celegans",
"SeaSquirts",
"Zebrafish",
"Mouse",
"Human"
)
anno_info_fname = "/home/ggj/jiaqiLi/dev/R_dev/To_Jiaqi/Tree/438celltype-NEW-20190728.annotation"
delete_list = c("TNFalpha cells(H).z", "sst1.1 cells(P).z", "Apelin cells(H).z", "Apelin cells(P).z",
"Testicular cell.m", "Prostate gland cell.m", "Luteal cell.m",
"Mammary gland in lactation.m", "Corneal cells.lz", "Ciona31", "Trophoblast progenitor cell.m",
"Unknown(H).z", "Unknown(B).z")
root_fname = "/home/ggj/jiaqiLi/dev/R_dev/script/root.txt"
# print and save all the tmp file
merge_celltype_pipeline(fname_vector, arranged_species_name_vector, anno_info_fname, root_fname,
delete_list=delete_list,
CHECK_POINT=TRUE)
}
test_merge_celltype_pipeline()
test_merge_celltype_pipeline()
test_merge_celltype_pipeline()
source("merge_celltype_pipeline.r")
test_merge_celltype_pipeline()
